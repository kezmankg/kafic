@page "/CreateOrder"
@using Blazored.Toast.Services
@using Client.Contracts
@using Client.Static
@using Share.Models

@inject IAuthenticationRepository _repo
@inject IOrderRepository _repoOrder
@inject IArticleRepository _repoArticle
@inject NavigationManager _navManager
@inject IToastService _toastService

<AuthorizeView>
    <Authorized>
        <button class="btn btn-secondary" style="float: right;" @onclick="() => GoBack()">Nazad</button>
        <h3>Kreiranje porudžbinu</h3>
        <hr />
        <br />
        <div class="centered error-message">
            @if (!string.IsNullOrWhiteSpace(message))
            {
                @message
            }
        </div>
        <EditForm Model="OrderModel" OnValidSubmit="HandleAdd" Context="EditForm">
            <DataAnnotationsValidator />
            @* <ValidationSummary /> *@
            <div class="row">
                <div class="form-group col-md-6">
                    <label for="group">Izaberi sto</label>
                    <InputSelect @bind-Value="OrderModel.DeskNo" class="form-control" id="group">
                        <option value="">-- Izaberite sto --</option>
                        @for (int i = 1; i <= ModelCompany.TablesNo; i++)
                        {
                            <option value="Sto @i">Sto @i</option>
                        }
                        @for (int i = 1; i <= ModelCompany.SunLoungersNo; i++)
                        {
                            <option value="Lezaljka @i">Ležaljka @i</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => OrderModel.DeskNo)" class="error-message" />
                </div>
                @* <div class="form-group col-md-6">
                    <label for="group">Izaberi konobara</label>
                    <InputSelect @bind-Value="OrderModel.ApplicationUserEmail" class="form-control" id="group">
                        <option value="">-- Izaberite konobara --</option>
                        @foreach (var user in AllUsers)
                        {
                            <option value="@user.Email">@user.FullName</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => OrderModel.ApplicationUserEmail)" class="error-message"/>
                </div> *@
            </div>
            <br />
            <hr />


            @foreach (var article in OrderModel.ArticleModels)
            {
                <div class="row align-items-end mb-3">
                    <div class="col-md-6">
                        <label>Artikal</label>
                        <button type="button" class="btn btn-outline-secondary w-100 text-start" @onclick="() => OpenModalForArticle(article)">
                            @GetArticleDisplay(article.Id)
                        </button>
                         <ValidationMessage For="@(() => article.Id)" class="text-danger" /> 
                    </div>

                    <div class="col-md-3">
                        <label>Količina</label>
                        <InputNumber @bind-Value="article.Amount" class="form-control" min="1" />
                        <ValidationMessage For="@(() => article.Amount)" />
                    </div>

                    <div class="col-md-3 text-center">
                        <button type="button" class="btn btn-danger mt-4" @onclick="@(() => RemoveArticle(article))">Ukloni</button>
                    </div>
                </div>
                <hr />
            }

            <button type="button" class="btn btn-secondary mb-3" @onclick="AddArticle">Dodaj artikal</button>
            <br /> <br />
            <div class="centered mb-4">
                <button class="btn btn-primary" type="submit">Pošalji narudžbinu</button>
            </div>

        </EditForm>
        @if (showArticleModal)
        {
            <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Izaberite artikal</h5>
                            <button type="button" class="btn-close" @onclick="CloseModal"></button>
                        </div>
                        <div class="modal-body">
                            @if (selectedGroup == null)
                            {
                                <h6>Izaberite grupu:</h6>
                                @foreach (var group in AllArticles)
                                {
                                    <button class="btn btn-primary m-1" @onclick="() => SelectGroup(group)">@group.Name</button>
                                }
                            }
                            else if (selectedSubgroup == null)
                            {
                                <h6>Izaberite podgrupu iz grupe <b>@selectedGroup.Name</b>:</h6>
                                @foreach (var subgroup in selectedGroup.Subgroups)
                                {
                                    <button class="btn btn-secondary m-1" @onclick="() => SelectSubgroup(subgroup)">@subgroup.Name</button>
                                }
                                <div class="mt-3">
                                    <button class="btn btn-sm btn-link" @onclick="() => selectedGroup = null">⟵ Nazad na grupe</button>
                                </div>
                            }
                            else
                            {
                                <h6>Izaberite artikal iz podgrupe <b>@selectedSubgroup.Name</b>:</h6>
                                @foreach (var artikal in selectedSubgroup.Articles)
                                {
                                    <button class="btn btn-outline-success m-1" @onclick="() => SelectArticle(artikal)">@artikal.Name (@artikal.Price.ToString("F2")€)</button>
                                }
                                <div class="mt-3">
                                    <button class="btn btn-sm btn-link" @onclick="() => selectedSubgroup = null">⟵ Nazad na podgrupe</button>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }

    </Authorized>
    <NotAuthorized>
        <p>Nemate pristup ovoj stranici.</p>
    </NotAuthorized>
</AuthorizeView>


@code {
    private CompanyModel ModelCompany = new CompanyModel();
    private OrderModel OrderModel = new OrderModel();
    private IList<GroupModel> AllArticles = new List<GroupModel>();
    private IList<RegistrationUserModel> AllUsers = new List<RegistrationUserModel>();

    private bool isSuccess = true;
    private string message = string.Empty;
    private String userEmail { get; set; } = string.Empty;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            userEmail = user.Identity.Name;
            ModelCompany = await _repo.GetCompanyPerEmail(user.Identity.Name);
            AllArticles = await _repoArticle.GetAllArticles(user.Identity.Name);
            OrderModel.ArticleModels.Add(new ArticleModelOrder { Amount = 1 });
            AllUsers = await _repo.GetAllUsers(user.Identity.Name);
        }
        else
        {
            _navManager.NavigateTo("/Login");
        }
    }
    private void AddArticle()
    {
        OrderModel.ArticleModels.Add(new ArticleModelOrder { Amount = 1 });
    }
    private void RemoveArticle(ArticleModelOrder stavka)
    {
        OrderModel.ArticleModels.Remove(stavka);
    }
    private async Task HandleAdd()
    {
        message = "";
        foreach (var artile in OrderModel.ArticleModels)
        {
            if(artile.Id < 1)
            {
                message = "Unesite sve nazive dodatih artikala.";
                return;
            }
        }
        OrderModel.ApplicationUserEmail = userEmail;
        var response = await _repoOrder.AddOrder(OrderModel);

        if (response)
        {
            // Uspešno promenjeno
            _navManager.NavigateTo("/order");
        }
        else
        {
            // Prikaz poruke o grešci
            message = "Došlo je do greške. Molimo kontaktirajte administratora.";
        }
    }
    private void GoBack()
    {
        _navManager.NavigateTo("/Order/");
    }


    private ArticleModelOrder? currentArticle;
    private bool showArticleModal = false;

    private GroupModel? selectedGroup;
    private SubgroupModel? selectedSubgroup;

    private void OpenModalForArticle(ArticleModelOrder article)
    {
        currentArticle = article;
        selectedGroup = null;
        selectedSubgroup = null;
        showArticleModal = true;
    }

    private void CloseModal()
    {
        showArticleModal = false;
        currentArticle = null;
        selectedGroup = null;
        selectedSubgroup = null;
    }

    private void SelectGroup(GroupModel group)
    {
        selectedGroup = group;
        selectedSubgroup = null;
    }

    private void SelectSubgroup(SubgroupModel subgroup)
    {
        selectedSubgroup = subgroup;
    }

    private void SelectArticle(ArticleModel selected)
    {
        if (currentArticle != null)
        {
            currentArticle.Id = selected.Id;
            currentArticle.Name = selected.Name;
            currentArticle.Price = selected.Price;
        }
        CloseModal();
    }

    private string GetArticleDisplay(int id)
    {
        var article = AllArticles
            .SelectMany(g => g.Subgroups)
            .SelectMany(sg => sg.Articles)
            .FirstOrDefault(a => a.Id == id);

        return article != null ? $"{article.Name} ({article.Price:F2}€)" : "-- Izaberite artikal --";
    }
}
