@page "/editorder/{DeskNo}"
@using Blazored.Toast.Services
@using Client.Contracts
@using Client.Static
@using Share.Models

@inject IOrderRepository _repo
@inject NavigationManager _navManager
@inject IToastService _toastService


<AuthorizeView>
    <Authorized>
        <div class="">
            <button class="btn btn-secondary" style="float: right;" @onclick="() => GoBack()">Nazad</button>
            <h3>Porudžbine za @DeskNo</h3>
            <hr />
            <div class="error-message centered">
                @if (!string.IsNullOrWhiteSpace(message))
                {
                    @message
                }
            </div>
            @{
                int iterator = 1;
            }
            @foreach (var order in AllOrders)
            {
                <div>
                    <p>Porudžbina @iterator - @order.Date - @order.ApplicationUserEmail</p>
                    <table class="table table-hover table-bordered">
                        <thead class="table-active">
                            <tr>
                                <th>Porudžbina</th>
                                <th>Količina</th>
                                <th>Cena</th>
                                <th>Ukupno</th>
                                <th></th>
                                @if (isAdmin)
                                {
                                    <th>Popust (%)</th>
                                }
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var article in order.ArticleModels)
                            {
                                <tr>
                                    <td>@article.Name</td>
                                    <td>@article.Amount</td>
                                    <td>@article.Price €</td>
                                    <td>@article.TotalPrice €</td>
                                    <td class="text-center">
                                        <a class="icon-btn" @onclick="@(() => RemoveArticle(order.Id, article.Id))">🗑️</a>
                                    </td>
                                    @if (isAdmin)
                                    {
                                        <td>
                                            <div class="d-flex align-items-center">
                                                <input type="number" min="0" max="100" class="form-control form-control-sm" style="width: 70px;"
                                                       @bind="@article.Discount" />
                                                <button class="btn btn-sm btn-success ms-2"
                                                        @onclick="() => ApplyDiscount(order.Id, article.Id, article.Discount)">
                                                    Primeni
                                                </button>
                                            </div>
                                        </td>
                                    }
                                </tr>
                            }
                        </tbody>
                    </table>
                    <p class="text-end me-4">Ukupan iznos porudžbine : @order.TotalOrderPrice €</p>
                    @if (isAdmin)
                    {
                        <div class="centered">
                            <button class="btn btn-primary" @onclick="() => RemoveOrder(order.Id)">Storniranje porudžbine</button>
                        </div>
                    }
                    <br />
                </div>
                iterator++;                                                                 
            }
            <hr />
            <div class="centered mb-4">
                <span class="me-4">Ukupna cena računa: @totalSum €</span>
                <button class="btn btn-primary" @onclick="() => PayOrder(DeskNo, userEmail)">Plaćanje</button>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <p>Nemate pristup ovoj stranici.</p>
    </NotAuthorized>
</AuthorizeView>


@code {
    private IList<OrderModel> AllOrders = new List<OrderModel>();
    private bool isSuccess = true;
    private string? message;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    [Parameter]
    public String DeskNo { get; set; } = string.Empty;
    private String userEmail { get; set; } = string.Empty;
    private double totalSum { get; set; }
    private bool isAdmin = false;

    protected override async Task OnParametersSetAsync()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            isAdmin = user.IsInRole("Administrator");
            userEmail = user.Identity.Name;
            AllOrders = await _repo.GetAllOrder(user.Identity.Name, DeskNo);
            totalSum = AllOrders.Sum(o => o.TotalOrderPrice);
        }
        else
        {
            _navManager.NavigateTo($"/Login");
        }
    }
    private async Task RemoveOrder(int id)
    {
        var result = await _repo.DeleteOrder(id);
        if (result)
        {
            message = "";
            AllOrders = await _repo.GetAllOrder(userEmail, DeskNo);
            totalSum = AllOrders.Sum(o => o.TotalOrderPrice);

        }
        else
        {
            message = "Došlo je do greške, molimo kontaktirajte administratora.";
        }
    }
    private async Task RemoveArticle(int idOrder, int idArticle)
    {
        var result = await _repo.DeleteArticle(idOrder, idArticle);
        if (result)
        {
            message = "";
            AllOrders = await _repo.GetAllOrder(userEmail, DeskNo);
            totalSum = AllOrders.Sum(o => o.TotalOrderPrice);

        }
        else
        {
            message = "Došlo je do greške, molimo kontaktirajte administratora.";
        }
    }
    private async Task PayOrder(string descNo, string userEmail)
    {
        var response = await _repo.PayOrder(descNo, userEmail, totalSum);

        if (response)
        {
            // Uspešno promenjeno
            _navManager.NavigateTo($"/Order/");
        }
        else
        {
            // Prikaz poruke o grešci
            message = "* Desila se greška";
        }
    }
    private void GoBack()
    {
        _navManager.NavigateTo($"/Order/");
    }

    private async Task ApplyDiscount(int orderId, int articleId, double discountPercentage)
    {
        ArticleDiscountModelOrder articleDiscountModelOrder = new ArticleDiscountModelOrder
            {
                OrderId = orderId,
                ArticleId = articleId,
                Discount = discountPercentage,
                UserEmail = userEmail,
                DeskNo = DeskNo
            };
        var result = await _repo.UpdateDiscount(articleDiscountModelOrder);
        if (result)
        {
            message = "";
            AllOrders = await _repo.GetAllOrder(userEmail, DeskNo);
            totalSum = AllOrders.Sum(o => o.TotalOrderPrice);

        }
        else
        {
            message = "Došlo je do greške, molimo kontaktirajte administratora.";
        }
    }

}

