@page "/editorder/{DeskNo}"
@using Blazored.Toast.Services
@using Client.Contracts
@using Client.Static
@using Share.Models

@inject IOrderRepository _repo
@inject NavigationManager _navManager
@inject IToastService _toastService


<AuthorizeView>
    <Authorized>
        <div class="">
            <div class="">
                <h3>Porudzbine</h3>
                <hr class="blue-hr" />
                <div class="error-message">
                    @if (!string.IsNullOrWhiteSpace(message))
                    {
                        @message
                    }
                    <h4>@DeskNo</h4>
                    @{
                        int iterator = 1;
                    }

                    @foreach (var order in AllOrders)
                    {
                        <div>
                            Porudzbina @iterator @order.Date @order.ApplicationUserEmail <br />
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th>Porudzbina</th> 
                                        <th>Kolicina</th>
                                        <th>Cena</th>
                                        <th>Ukupno</th>
                                        <th></th>                                            
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var article in order.ArticleModels)
                                    {
                                        <tr>
                                            <td>@article.Name</td>
                                            <td>@article.Amount</td>
                                            <td>@article.Price €</td>
                                            <td>@article.TotalPrice €</td>
                                            <a class="icon-btn" @onclick="@(() => RemoveArticle(order.Id, article.Id))">🗑️</a>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                            @if (isAdmin)
                            {
                                <button class="btn btn-primary" @onclick="() => RemoveOrder(order.Id)">Storniranje porudžbine</button>
                            }
                            <br />
                            Ukupno: @order.TotalOrderPrice €
                            <hr class="blue-hr" /> <br />
                        </div>
                        iterator++;                                                                 
                    }
                    
                    <h4>Ukupna cena racuna: @totalSum €</h4>
                    <button class="btn btn-primary" @onclick="() => PayOrder(DeskNo, userEmail)">Placanje</button>

                </div>
            </div>
            
        </div>
    </Authorized>
    <NotAuthorized>
        <p>Nemate pristup ovoj stranici.</p>
    </NotAuthorized>
</AuthorizeView>


@code {
    private IList<OrderModel> AllOrders = new List<OrderModel>();
    private bool isSuccess = true;
    private string? message;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    [Parameter]
    public String DeskNo { get; set; } = string.Empty;
    private String userEmail { get; set; } = string.Empty;
    private double totalSum { get; set; }
    private bool isAdmin = false;

    protected override async Task OnParametersSetAsync()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            isAdmin = user.IsInRole("Administrator");
            userEmail = user.Identity.Name;
            AllOrders = await _repo.GetAllOrder(user.Identity.Name, DeskNo);
            totalSum = AllOrders.Sum(o => o.TotalOrderPrice);
        }
    }
    private async Task RemoveOrder(int id)
    {
        var result = await _repo.DeleteOrder(id);
        if (result)
        {
            message = "";
            AllOrders = await _repo.GetAllOrder(userEmail, DeskNo);

        }
        else
        {
            message = "Došlo je do greške, molimo kontaktirajte administratora.";
        }
    }
    private async Task RemoveArticle(int idOrder, int idArticle)
    {
        var result = await _repo.DeleteArticle(idOrder, idArticle);
        if (result)
        {
            message = "";
            AllOrders = await _repo.GetAllOrder(userEmail, DeskNo);

        }
        else
        {
            message = "Došlo je do greške, molimo kontaktirajte administratora.";
        }
    }
    private async Task PayOrder(string descNo, string userEmail)
    {
        var response = await _repo.PayOrder(descNo, userEmail);

        if (response)
        {
            // Uspešno promenjeno
            _navManager.NavigateTo($"/Order/");
        }
        else
        {
            // Prikaz poruke o grešci
            message = "* Desila se greška";
        }
    }

}

