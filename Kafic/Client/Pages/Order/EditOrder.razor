@page "/editorder/{DeskNo}"
@using Blazored.Toast.Services
@using Client.Contracts
@using Client.Static
@using Share.Models

@inject IOrderRepository _repo
@inject IAuthenticationRepository _repoUser
@inject NavigationManager _navManager
@inject IToastService _toastService


<AuthorizeView>
    <Authorized>
        <div class="">
            <button class="btn btn-secondary" style="float: right;" @onclick="() => GoBack()">Nazad</button>
            <h3>Porudžbine za @DeskNo</h3>
            <hr />
            <div class="error-message centered">
                @if (!string.IsNullOrWhiteSpace(message))
                {
                    @message
                }
            </div>
            @{
                int iterator = 1;
            }
            @foreach (var order in AllOrders)
            {
                <div >
                    <p>Porudžbina @iterator</p>
                    <div class="table-responsive">
                        <table class="table table-hover table-bordered">
                            <thead class="table-active">
                                <tr>
                                    <th>Porudžbina</th>
                                    <th>Količina</th>
                                    <th>Cena</th>
                                    <th>Popust (%)</th>
                                    <th>Ukupno</th>
                                    @if (isAdmin)
                                    {
                                        <th></th>
                                    }
                                   

                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var article in order.ArticleModels)
                                {
                                    <tr>
                                        <td>@article.Name</td>
                                        <td>@article.Amount</td>
                                        <td>@article.Price.ToString("F2") €</td>
                                        <td>
                                            <div class="d-flex align-items-center">
                                                <input type="number" min="0" max="100" class="form-control form-control-sm" style="width: 70px;"
                                                @bind="@article.Discount" />
                                                <button class="btn btn-sm btn-success ms-2"
                                                @onclick="() => ApplyDiscount(order.Id, article.Id, article.Discount)">
                                                    Primeni
                                                </button>
                                            </div>
                                        </td>
                                        <td>@article.TotalPrice €</td>
                                        
                                        @if (isAdmin)
                                        {
                                            <td class="text-center">
                                                <a class="icon-btn" @onclick="@(() => RemoveArticle(order.Id, article.Id))">🗑️</a>
                                            </td>
                                        }

                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    <p class="text-end me-4">Ukupan iznos porudžbine : @order.TotalOrderPrice.ToString("F2") €</p>
                    @if (isAdmin)
                    {
                        <div class="centered">
                            <button class="btn btn-primary" @onclick="() => RemoveOrder(order.Id)">Storniranje porudžbine</button>
                        </div>
                    }
                    <br />
                </div>
                iterator++;                                                                 
            }
            <hr />
            <div class="d-flex justify-content-center align-items-center mb-4">
                Popust na račun (%):
                <input type="number" min="0" max="100" class="form-control form-control-sm" style="width: 70px;"
                @bind="@discountModel.DiscountPercentage" />
                <button class="btn btn-sm btn-success ms-2"
                @onclick="() => ApplyDiscountOnBIll()">
                    Primeni
                </button>
            </div>
            <div class="centered mb-4">               
                <span class="me-4">Ukupna cena računa: @totalSum.ToString("F2") € </span>
                <button class="btn btn-primary" @onclick="() => ShowBill(DeskNo)">Prikaz računa</button>
            </div>

            @if (isAdmin)
            {           
                <div class="centered mb-4">
                    <label>Izaberi konobara</label>
                    <div class="d-flex justify-content-center mb-4">
                        <InputSelect @bind-Value="selectedEmail" class="form-control text-center" style="width: auto; min-width: 200px;">
                            <option value="">-- Izaberite konobara --</option>
                            @foreach (var user in AllUsers)
                            {
                                <option value="@user.Email">@user.FullName</option>
                            }
                        </InputSelect>
                    </div>
                    <button class="btn btn-primary" @onclick="PayOrder" disabled="@string.IsNullOrWhiteSpace(selectedEmail)">Plaćanje</button>
                </div>
            }
            else
            {
                <div class="centered mb-4">
                    <button class="btn btn-primary" @onclick="() => PayOrder()">Plaćanje</button>
                </div>
            }
            
        </div>
    </Authorized>
    <NotAuthorized>
        <p>Nemate pristup ovoj stranici.</p>
    </NotAuthorized>
</AuthorizeView>


@code {
    private IList<OrderModel> AllOrders = new List<OrderModel>();
    private DiscountModel discountModel = new DiscountModel();
    private IList<RegistrationUserModel> AllUsers = new List<RegistrationUserModel>();
    private bool isSuccess = true;
    private string? message;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    [Parameter]
    public String DeskNo { get; set; } = string.Empty;
    private String userEmail { get; set; } = string.Empty;
    private String selectedEmail { get; set; } = string.Empty;
    private double totalSum { get; set; }
    private bool isAdmin = false;

    protected override async Task OnParametersSetAsync()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            isAdmin = user.IsInRole("Administrator");
            userEmail = user.Identity.Name;
            AllOrders = await _repo.GetAllOrder(user.Identity.Name, DeskNo);
            discountModel = await _repo.GetDiscount(userEmail, DeskNo);
            totalSum = AllOrders.Sum(o => o.TotalOrderPrice) * (100 - discountModel.DiscountPercentage) / 100;
            AllUsers = await _repoUser.GetAllUsers(user.Identity.Name);
        }
        else
        {
            _navManager.NavigateTo($"/Login");
        }
    }
    private void RemoveOrder(int id)
    {
        _navManager.NavigateTo($"/Delete/5/{id}/{DeskNo}");
    }
    private void RemoveArticle(int idOrder, int idArticle)
    {
        _navManager.NavigateTo($"/Delete/6/{idOrder}/{DeskNo}/{idArticle}");
    }
    private async Task PayOrder()
    {
        if (totalSum == 0)
        {
            message = "* Ništa nije poručeno na izabranom stolu!";
        }
        else
        {
            string emailToSend = string.Empty;
            if (isAdmin)
            {
                if (string.IsNullOrWhiteSpace(selectedEmail))
                {
                    message = "* Izaberite konobara";
                }
                else
                {
                    emailToSend = selectedEmail;
                }
            }
            else
            {
                emailToSend = userEmail;
            }

            var response = await _repo.PayOrder(DeskNo, emailToSend, totalSum);

            if (response)
            {
                // Uspešno promenjeno
                _navManager.NavigateTo($"/Order/");
            }
            else
            {
                // Prikaz poruke o grešci
                message = "* Desila se greška";
            }
        }

    }
    private void GoBack()
    {
        _navManager.NavigateTo($"/Order/");
    }

    private async Task ApplyDiscount(int orderId, int articleId, double discountPercentage)
    {
        if (discountPercentage > 100 || discountPercentage < 0)
        {
            message = "Popust mora biti veći od 0% i manji od 100%.";
            AllOrders = await _repo.GetAllOrder(userEmail, DeskNo);
            totalSum = AllOrders.Sum(o => o.TotalOrderPrice) * (100 - discountModel.DiscountPercentage) / 100;
        }
        else
        {
            ArticleDiscountModelOrder articleDiscountModelOrder = new ArticleDiscountModelOrder
                {
                    OrderId = orderId,
                    ArticleId = articleId,
                    Discount = discountPercentage,
                    UserEmail = userEmail,
                    DeskNo = DeskNo
                };
            var result = await _repo.UpdateDiscount(articleDiscountModelOrder);
            if (result)
            {
                message = "";
                AllOrders = await _repo.GetAllOrder(userEmail, DeskNo);
                totalSum = AllOrders.Sum(o => o.TotalOrderPrice) * (100 - discountModel.DiscountPercentage) / 100;

            }
            else
            {
                message = "Došlo je do greške, molimo kontaktirajte administratora.";
            }
        }        
    }

    private async Task ApplyDiscountOnBIll()
    {
        if (discountModel.DiscountPercentage > 100 || discountModel.DiscountPercentage < 0)
        {
            message = "Popust mora biti veći od 0% i manji od 100%.";
            AllOrders = await _repo.GetAllOrder(userEmail, DeskNo);
            discountModel = await _repo.GetDiscount(userEmail, DeskNo);
            totalSum = AllOrders.Sum(o => o.TotalOrderPrice) * (100 - discountModel.DiscountPercentage) / 100;
            return;
        }

        if (discountModel.Id == 0)
        {
            discountModel.UserEmail = userEmail;
            discountModel.DeskNo = DeskNo;
        }
        var result = await _repo.UpdateDiscountOnBill(discountModel);
        if (result)
        {
            message = "";
            AllOrders = await _repo.GetAllOrder(userEmail, DeskNo);
            discountModel = await _repo.GetDiscount(userEmail, DeskNo);
            totalSum = AllOrders.Sum(o => o.TotalOrderPrice) * (100 - discountModel.DiscountPercentage) / 100;

        }
        else
        {
            message = "Došlo je do greške, molimo kontaktirajte administratora.";
        }
    }

    private async Task ShowBill(string descNo)
    {
        _navManager.NavigateTo($"/bill/{descNo}");
    }

}

