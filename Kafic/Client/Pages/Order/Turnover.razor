@page "/Turnover"
@using Blazored.Toast.Services
@using Client.Contracts
@using Client.Static
@using Share.Models

@inject IOrderRepository _repo
@inject IAuthenticationRepository _repoUser
@inject NavigationManager _navManager
@inject IToastService _toastService


<AuthorizeView>
    <Authorized>
            <button class="btn btn-secondary" style="float: right;" @onclick="() => GoBack()">Nazad</button>
            <h3>Promet</h3>
            <hr />
            <div class="error-message centered">
                @if (!string.IsNullOrWhiteSpace(message))
                {
                    @message
                }
            </div>
            <div class="col-md-4 mx-auto">
                <div class="text-center">
                    <button class="btn-sm btn-primary" @onclick="HandleCurrentDay">Današnji promet</button>
                    <button class="btn-sm btn-secondary" @onclick="ShowDateFilters">Datum filter</button>
                    <button class="btn-sm btn-secondary" @onclick="ShowWaiterFilters">Konobar filter</button>
                </div>

                @if (showWaiterFilter)
                {
                    <div class="mt-3">
                        <h5>Ukupno vrednost porudžbina za konobara</h5>   
                        <EditForm Model="@turnoverUser" OnValidSubmit="HandleUserDateRangeSubmit" Context="EditForm2">
                            <div class="form-group">
                                <label>Datum od:</label>
                                <InputDate @bind-Value="turnoverUser.DateFrom" class="form-control" />
                            </div>
                            <div class="form-group">
                                <label>Datum do:</label>
                                <InputDate @bind-Value="turnoverUser.DateTo" class="form-control" />
                            </div>
                            <div class="form-group mb-4">
                                <label for="group">Izaberi konobara</label>
                                <InputSelect @bind-Value="turnoverUser.UserEmail" class="form-control" id="group">
                                    <option value="">-- Izaberite konobara --</option>
                                    @foreach (var user in AllUsers)
                                    {
                                        <option value="@user.Email">@user.FullName</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => turnoverUser.UserEmail)" class="error-message" />
                            </div>
                            <div class="text-center">
                                <button type="submit" class="btn-sm btn-primary">Prikaži promet</button>
                            </div>
                        </EditForm>
                    </div>
                }

                @if (showDateFilter)
                {
                    <div class="mt-3">
                        <h5>Promet za odredjeni period</h5>
                        <EditForm Model="@dateRange" OnValidSubmit="HandleDateRangeSubmit" Context="EditForm1">
                            <div class="form-group">
                                <label>Datum od:</label>
                                <InputDate @bind-Value="dateRange.DateFrom" class="form-control" />
                            </div>
                            <div class="form-group mb-4">
                                <label>Datum do:</label>
                                <InputDate @bind-Value="dateRange.DateTo" class="form-control" />
                            </div>
                            <div class="text-center">
                                <button type="submit" class="btn-sm btn-primary">Prikaži promet</button>
                            </div>
                        </EditForm>
                    </div>
                }
            </div>
            <hr />
            <br />
            <div class="text-center">
                 @messageFouUser
            </div>
        
    </Authorized>
    <NotAuthorized>
        <p>Nemate pristup ovoj stranici.</p>
    </NotAuthorized>
</AuthorizeView>


@code {
    public bool showDateFilter = false;
    public bool showWaiterFilter = false;

    private bool isSuccess = true;
    private string? message;
    private string? messageFouUser;
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    TurnoverModel dateRange = new()
        {
            DateFrom = DateTime.Today,
            DateTo = DateTime.Today
        };

    TurnoverModel turnoverUser = new()
        {
            DateFrom = DateTime.Today,
            DateTo = DateTime.Today
        };

    private String userEmail { get; set; } = string.Empty;
    private double totalSum { get; set; }

    private IList<RegistrationUserModel> AllUsers = new List<RegistrationUserModel>();

    protected override async Task OnParametersSetAsync()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            userEmail = user.Identity.Name;
            AllUsers = await _repoUser.GetAllUsers(userEmail);
        }
        else
        {
            _navManager.NavigateTo($"/Login");
        }
    }

    private void GoBack()
    {
        _navManager.NavigateTo($"/order/");
    }

    private async Task HandleDateRangeSubmit()
    {
        message = "";
        messageFouUser = "";
        var response = await _repo.GetTurnover(dateRange.DateFrom, dateRange.DateTo, userEmail);

        if (response != null)
        {
            // Uspešno promenjeno
            messageFouUser = "Promet od datuma: " 
            + response.DateFrom.ToString("dd.MM.yyyy") + " do datuma: " 
            + response.DateTo.ToString("dd.MM.yyyy") + " je: " + response.TotalSum.ToString("F2") + " €";
        }
        else
        {
            // Prikaz poruke o grešci
            message = "Došlo je do greške. Molimo kontaktirajte administratora.";
        }
    }

    private async Task HandleCurrentDay()
    {
        showDateFilter = false;
        showWaiterFilter = false;
        message = "";
        messageFouUser = "";

        var response = await _repo.GetTurnover(DateTime.Today, DateTime.Today.AddDays(1), userEmail);

        if (response != null)
        {
            // Uspešno promenjeno
            messageFouUser = "Trenutni dnevni promet je: " + response.TotalSum.ToString("F2") + " €";
        }
        else
        {
            // Prikaz poruke o grešci
            message = "Došlo je do greške. Molimo kontaktirajte administratora.";
        }
    }

    private async Task HandleUserDateRangeSubmit()
    {
        message = "";
        messageFouUser = "";
        if (string.IsNullOrEmpty(turnoverUser.UserEmail))
        {
            message = "Morate uneti konobara";
            return;
        }
        var response = await _repo.GetTurnoverForUser(turnoverUser.DateFrom, turnoverUser.DateTo, turnoverUser.UserEmail);

        if (response != null)
        {
            // Uspešno promenjeno
            messageFouUser = "Promet od datuma: "
            + response.DateFrom.ToString("dd.MM.yyyy") + " do datuma: "
            + response.DateTo.ToString("dd.MM.yyyy") + " je: " + response.TotalSum.ToString("F2") + " €" + " za konobara: " 
            + response.UserEmail;
        }
        else
        {
            // Prikaz poruke o grešci
            message = "Došlo je do greške. Molimo kontaktirajte administratora.";
        }
    }
    public void ShowDateFilters()
    {
        showDateFilter = true;
        showWaiterFilter = false;
    }
    public void ShowWaiterFilters()
    {
        showDateFilter = false;
        showWaiterFilter = true;
    }
}

