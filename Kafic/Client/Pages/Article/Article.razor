@page "/Article"
@using Blazored.Toast.Services
@using Client.Contracts
@using Client.Static
@using Share.Models

@inject IAuthenticationRepository _repo
@inject IArticleRepository _repoArticle
@inject NavigationManager _navManager
@inject IToastService _toastService


<AuthorizeView Roles="Administrator">
    <Authorized>
        <div class="row">
            <div class="col-md-3 border-end">
                <br>
                <h4>Dodavanje novog artikla</h4>
                <hr />
                <br />
                <div>
                    @if (!string.IsNullOrWhiteSpace(errorMessage))
                    {
                        @errorMessage
                    }
                </div>
                <EditForm Model="Model" OnValidSubmit="HandleRegistration" Context="EditForm">
                    <DataAnnotationsValidator />
                    @* <ValidationSummary /> *@
                    <div class="form-group mb-2">
                        <label for="group">Group</label>
                        <InputSelect @bind-Value="Model.SubgroupId" class="form-control" id="group">
                            <option value="0">-- Izaberite podgrupu --</option>
                            @foreach (var group in AllGroupsWithSubgroups)
                            {
                                <optgroup label="@group.Name">
                                    @foreach (var subgroup in group.Subgroups)
                                    {
                                        <option value="@subgroup.Id">@subgroup.Name</option>
                                    }
                                </optgroup>

                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => Model.SubgroupId)" class="error-message" />
                    </div>
                    <div class="form-group mb-2">
                        <label for="firstname">Name</label>
                        <InputText @bind-Value="Model.Name" class="form-control" id="emailaddress" />
                        <ValidationMessage For="@(() => Model.Name)" class="error-message"/>
                    </div>

                    <div class="form-group mb-4">
                        <label for="Price">Cena</label>
                        <InputNumber @bind-Value="Model.Price" class="form-control" id="Price" />
                        <ValidationMessage For="@(() => Model.Price)" class="error-message" />
                    </div>
                    <div class="centered">            
                        <button class="btn btn-primary" type="submit">Dodaj</button>
                    </div>
                </EditForm>
                <hr />
            </div>
            <div class="col-md-9"> 
                <br />
                <div class="centered">
                    <h3>Lista svih artikla</h3>
                </div>

                @foreach (var group in AllArticles)
                {   <br />
                    <h4><b>@group.Name</b></h4>
                    <hr />

                    @foreach (var subgroup in group.Subgroups)
                    {
                        <h6><b>@subgroup.Name</b></h6>
                        <div class="table-responsive">
                            <table class="table table-hover table-bordered">
                                <thead class="table-active">
                                    <tr>
                                        <th>Ime</th>
                                        <th>Cena</th>
                                        <th></th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var article in subgroup.Articles)
                                    {
                                        <tr>
                                            <td>@article.Name</td>
                                            <td>@article.Price.ToString("F2")€</td>
                                            <td class="text-center">
                                                <a class="icon-btn" @onclick="@(() => Edit(article.Id))">✏️</a>
                                                <a class="icon-btn " @onclick="@(() => Delete(article.Id))">🗑️</a>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                }
            </div>
        </div>      

    </Authorized>
    <NotAuthorized>
        <p>Nemate pristup ovoj stranici.</p>
    </NotAuthorized>
</AuthorizeView>
@code {
    private ArticleModel Model = new ArticleModel();
    private bool isSuccess = true;
    private string? errorMessage;
    private string userEmail = string.Empty;
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private IList<GroupModel> AllGroupsWithSubgroups = new List<GroupModel>();
    private IList<GroupModel> AllArticles = new List<GroupModel>();

    protected override async Task OnParametersSetAsync()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            userEmail = user.Identity.Name;
            AllGroupsWithSubgroups = await _repoArticle.GetAllGroupWithSubgroup(user.Identity.Name);
            AllArticles = await _repoArticle.GetAllArticles(user.Identity.Name);
        }
        else
        {
            _navManager.NavigateTo("/login");
        }
    }

    private async Task HandleRegistration()
    {
        Model.ApplicationUserEmail = userEmail;
        var result = await _repoArticle.AddArticle(Model);
        if (result)
        {
            Model = new ArticleModel();
            errorMessage = "";
            AllArticles = await _repoArticle.GetAllArticles(userEmail);

        }
        else
        {
            errorMessage = "Došlo je do greške, molimo kontaktirajte administratora.";
        }
    }

    private void Edit(int id)
    {
        _navManager.NavigateTo($"/EditArticle/{id}");
    }

    private void Delete(int id)
    {
        _navManager.NavigateTo($"/Delete/4/{id}");
    }
}
