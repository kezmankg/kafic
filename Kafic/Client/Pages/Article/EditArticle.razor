@page "/EditArticle/{Id}"
@using Blazored.Toast.Services
@using Client.Contracts
@using Client.Static
@using Share.Models

<h3>Settings</h3>


@inject IArticleRepository _repo
@inject NavigationManager _navManager
@inject IToastService _toastService


<AuthorizeView Roles="Administrator">
    <Authorized>
        Update User Info
        <hr />
        <br />
        @if (!string.IsNullOrWhiteSpace(message))
        {
            @message
        }

        <EditForm Model="Model" OnValidSubmit="HandleUserGroup" Context="EditForm1">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label for="group">Group</label>
                <InputSelect @bind-Value="Model.SubgroupId" class="form-control" id="group">
                    <option value="0">-- Izaberite podgrupu --</option>
                    @foreach (var group in AllGroupsWithSubgroups)
                    {
                        <optgroup label="@group.Name">
                            @foreach (var subgroup in group.Subgroups)
                            {
                                <option value="@subgroup.Id">@subgroup.Name</option>
                            }
                        </optgroup>

                    }
                </InputSelect>
                <ValidationMessage For="@(() => Model.SubgroupId)" />
            </div>
            <div class="form-group">
                <label for="firstname">Name</label>
                <InputText @bind-Value="Model.Name" class="form-control" id="emailaddress" />
                <ValidationMessage For="@(() => Model.Name)" />
            </div>

            <div class="form-group">
                <label for="Price">Cena</label>
                <InputNumber @bind-Value="Model.Price" class="form-control" id="Price" />
                <ValidationMessage For="@(() => Model.Price)" />
            </div>


            <button class="btn btn-primary" type="submit">
                <span class="oi oi-pencil"></span>
                Create Author
            </button>
        </EditForm>
        <br /><br />


    </Authorized>
    <NotAuthorized>
        <p>Nemate pristup ovoj stranici.</p>
    </NotAuthorized>
</AuthorizeView>


@code {
    private ArticleModel Model = new ArticleModel();
    private bool isSuccess = true;
    private string? message;
    private IList<GroupModel> AllGroupsWithSubgroups = new List<GroupModel>();
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    [Parameter]
    public String Id { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            Model = await _repo.GetArticleById(Id);
            AllGroupsWithSubgroups = await _repo.GetAllGroupWithSubgroup(user.Identity.Name);
        }
    }
    private async Task HandleUserGroup()
    {
        var response = await _repo.UpdateArtile(Model);

        if (response)
        {
            // Uspešno promenjeno
            _navManager.NavigateTo($"/Article/");
        }
        else
        {
            // Prikaz poruke o grešci
            message = "error";
        }
    }

}
