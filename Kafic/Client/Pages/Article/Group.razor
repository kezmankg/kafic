@page "/Group"
@using Blazored.Toast.Services
@using Client.Contracts
@using Client.Static
@using Share.Models

@inject IAuthenticationRepository _repo
@inject IArticleRepository _repoArticle
@inject NavigationManager _navManager
@inject IToastService _toastService



<AuthorizeView Roles="Administrator">
    <Authorized>
        <div class="shadowed-form kafic-reg-form mx-auto ">
            <div class="centered">
                <h3>Grupe</h3>
                <hr />
                <div class="error-message">
                    @if (!string.IsNullOrWhiteSpace(errorMessage))
                    {
                        @errorMessage
                    }
                </div>
            </div>

            <EditForm Model="Model" OnValidSubmit="HandleRegistration" Context="EditForm">
                <DataAnnotationsValidator />
                @* <ValidationSummary /> *@
                <div class="form-group mb-4">
                    <label for="firstname">Ime grupe</label>
                    <InputText @bind-Value="Model.Name" class="form-control" id="emailaddress" />
                    <ValidationMessage For="@(() => Model.Name)" class="error-message" />
                </div>
                <div class="centered">
                    <button class="btn btn-primary" type="submit">Kreiraj novu grupu</button>
                </div>
            </EditForm>
            <hr />
            <br />
            <h4>List svih grupa</h4>
            <table class="table table-hover table-bordered">
                <thead class="table-active">
                    <tr>
                        <th>Ime grupe</th>
                        <th>Akcije</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var group in AllGroups)
                    {
                        <tr>
                            <td>@group.Name</td>
                            <td class="text-center">
                                <a class="icon-btn me-3" @onclick="@(() => Edit(group.Id))">✏️</a>
                                <a class="icon-btn" @onclick="@(() => Delete(group.Id))">🗑️</a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </Authorized>
    <NotAuthorized>
        <p>Nemate pristup ovoj stranici.</p>
    </NotAuthorized>
</AuthorizeView>
@code {
    private GroupModel Model = new GroupModel();
    private bool isSuccess = true;
    private string? errorMessage;
    private string userEmail = string.Empty;
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private IList<GroupModel> AllGroups = new List<GroupModel>();

    protected override async Task OnParametersSetAsync()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            userEmail = user.Identity.Name;
            AllGroups = await _repoArticle.GetAllGroup(user.Identity.Name);
        }
    }

    private async Task HandleRegistration()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;
        var userName = user.Identity.Name;
        Model.AdminEmail = userName;

        var result = await _repoArticle.AddGroup(Model);
        if (result)
        {
            Model = new GroupModel();
            errorMessage = "";
            AllGroups = await _repoArticle.GetAllGroup(user.Identity.Name);

        }
        else
        {
            errorMessage = "Greska kod dodavanja grupe";
        }
    }

    private void Edit(int id)
    {
        _navManager.NavigateTo($"/EditGroup/{id}");
    }

    private async Task Delete(int id)
    {
        var result = await _repoArticle.DeleteGroup(id);
        if (result)
        {
            errorMessage = "";
            AllGroups = await _repoArticle.GetAllGroup(userEmail);

        }
        else
        {
            errorMessage = "Greska pri brisanju";
        }
    }
}
