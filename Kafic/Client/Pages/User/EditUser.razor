@page "/edituser/{Id}"
@using Blazored.Toast.Services
@using Client.Contracts
@using Client.Static
@using Share.Models

<h3>Settings</h3>


@inject IAuthenticationRepository _repo
@inject NavigationManager _navManager
@inject IToastService _toastService


<AuthorizeView Roles="Administrator">
    <Authorized>
        Update User Info
        <hr />
        <br />
        @if (!string.IsNullOrWhiteSpace(message))
        {
            @message
        }

        <EditForm Model="Model" OnValidSubmit="HandleSettingsUser" Context="EditForm1">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label for="lastname">Ime i prezime</label>
                <InputText @bind-Value="Model.FullName" class="form-control" id="FullName" />
                <ValidationMessage For="@(() => Model.FullName)" />
            </div>

            <div class="form-group">
                <label for="lastname">Broj Telefona</label>
                <InputText @bind-Value="Model.PhoneNumber" class="form-control" id="PhoneNumber" />
                <ValidationMessage For="@(() => Model.PhoneNumber)" />
            </div>
            <button class="btn btn-primary" type="submit">
                <span class="oi oi-pencil"></span>
                Create Author
            </button>
        </EditForm>
        <br /><br />
        Update Password

    </Authorized>
    <NotAuthorized>
        <p>Nemate pristup ovoj stranici.</p>
    </NotAuthorized>
</AuthorizeView>


@code {
    private RegistrationUserModelEdit Model = new RegistrationUserModelEdit();
    private bool isSuccess = true;
    private string? message;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    [Parameter]
    public String Id { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            Model = await _repo.GetUserPerId(Id);
        }
    }
    private async Task HandleSettingsUser()
    {
        message = "Test";
        var response = await _repo.UpdateUser(Model);

        if (response)
        {
            // Uspešno promenjeno
            _navManager.NavigateTo($"/Users/");
        }
        else
        {
            // Prikaz poruke o grešci
            message = "error";
        }
    }
}
