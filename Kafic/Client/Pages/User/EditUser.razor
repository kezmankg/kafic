@page "/edituser/{Id}"
@using Blazored.Toast.Services
@using Client.Contracts
@using Client.Static
@using Share.Models

@inject IAuthenticationRepository _repo
@inject NavigationManager _navManager
@inject IToastService _toastService

<div class="login-form shadowed-form mx-auto">
    <AuthorizeView Roles="Administrator">
        <Authorized>
                <div class="centered">
                    <h3>Informacije o konobaru</h3>
                    <br />
                    <div class="error-message">
                        @if (!string.IsNullOrWhiteSpace(message))
                        {
                            @message
                        }
                    </div>
                </div>

                <EditForm Model="Model" OnValidSubmit="HandleSettingsUser" Context="EditForm1">
                    <DataAnnotationsValidator />
                    <div class="form-group mar-bot">
                        <label for="lastname">Ime i prezime</label>
                        <InputText @bind-Value="Model.FullName" class="form-control" id="FullName" />
                        <ValidationMessage For="@(() => Model.FullName)" class="error-message"/>
                    </div>
                    <div class="form-group mar-bot">
                        <label for="lastname">Broj telefona</label>
                        <InputText @bind-Value="Model.PhoneNumber" class="form-control" id="PhoneNumber" />
                        <ValidationMessage For="@(() => Model.PhoneNumber)" class="error-message"/>
                    </div>
                    <br />
                    <div class="centered">
                        <button class="btn btn-primary" type="submit">Izmeni</button>
                    </div>
                </EditForm>
                <hr class="blue-hr"/>
                <br />
                <div class="centered">
                    <h3>Izmena lozinke</h3>                  
                    <br />
                    <div class="error-message">
                    @if (!string.IsNullOrWhiteSpace(message))
                    {
                        @message
                    }
                    </div>
                </div>
                <EditForm Model="ModelEditPass" OnValidSubmit="HandleSettingsUserPass" Context="EditForm2">
                    <DataAnnotationsValidator />
                    <div class="form-group">
                        <label for="lastname">Nova lozinka</label>
                        <InputText @bind-Value="ModelEditPass.Password" type="password" class="form-control" id="PhoneNumber" />
                        <ValidationMessage For="@(() => ModelEditPass.Password)" class="error-message" />
                    </div>
                    <br />
                    <div class="centered">
                        <button class="btn btn-primary" type="submit">Izmeni</button>
                    </div>
                </EditForm>
        </Authorized>
        <NotAuthorized>
            <p>Nemate pristup ovoj stranici.</p>
        </NotAuthorized>
    </AuthorizeView>
</div>



@code {
    private RegistrationUserModelEdit Model = new RegistrationUserModelEdit();
    private RegistrationUserModelEditPassword ModelEditPass = new RegistrationUserModelEditPassword();
    private bool isSuccess = true;
    private string? message;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    [Parameter]
    public String Id { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            Model = await _repo.GetUserPerId(Id);
            ModelEditPass.Id = Model.Id;
        }
    }
    private async Task HandleSettingsUser()
    {
        var response = await _repo.UpdateUser(Model);

        if (response)
        {
            // Uspešno promenjeno
            _navManager.NavigateTo($"/Users/");
        }
        else
        {
            // Prikaz poruke o grešci
            message = "error";
        }
    }

    private async Task HandleSettingsUserPass()
    {
        var response = await _repo.UpdateUserPassword(ModelEditPass);

        if (response)
        {
            // Uspešno promenjeno
            _navManager.NavigateTo($"/Users/");
        }
        else
        {
            // Prikaz poruke o grešci
            message = "Došlo je do greške, molimo kontaktirajte administratora.";
        }
    }
}
