@page "/Register"
@using Blazored.Toast.Services
@using Client.Contracts
@using Client.Static
@using Share.Models

<h3>Register</h3>


@inject IAuthenticationRepository _repo
@inject NavigationManager _navManager
@inject IToastService _toastService


Create New Author
<hr />
<br />
@if (!string.IsNullOrWhiteSpace(errorMessage))
{
    @errorMessage
}


<EditForm Model="Model" OnValidSubmit="HandleRegistration">
    <DataAnnotationsValidator />
    @* <ValidationSummary /> *@
    <div class="form-group">
        <label for="firstname">Email</label>
        <InputText @bind-Value="Model.EmailAddress" class="form-control" id="emailaddress" />
        <ValidationMessage For="@(() => Model.EmailAddress)" />
    </div>
    <div class="form-group">
        <label for="lastname">Sifra</label>
        <InputText @bind-Value="Model.Password" type="password" class="form-control" id="password" />
        <ValidationMessage For="@(() => Model.Password)" />
    </div>
    <div class="form-group">
        <label for="lastname">Ime i prezime</label>
        <InputText @bind-Value="Model.FullName" class="form-control" id="fullname" />
        <ValidationMessage For="@(() => Model.FullName)" />
    </div>
    <div class="form-group">
        <label for="lastname">Telefon</label>
        <InputText @bind-Value="Model.PhoneNumber" class="form-control" id="PhoneNumber" />
        <ValidationMessage For="@(() => Model.PhoneNumber)" />
    </div>
    <button class="btn btn-primary" type="submit">
        <span class="oi oi-pencil"></span>
        Create Author
    </button>
</EditForm>

@code{
    private RegistrationModel Model = new RegistrationModel();
    private bool isSuccess = true;
    private string? errorMessage;

    private async Task HandleRegistration()
    {
        var error = await _repo.Register(Model);

        if (error == null)
        {
            // Uspešno registrovan
            _navManager.NavigateTo("/login");
        }
        else
        {
            // Prikaz poruke o grešci
            errorMessage = error;
        }
    }
}
