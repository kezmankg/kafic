@page "/Users"
@using Blazored.Toast.Services
@using Client.Contracts
@using Client.Static
@using Share.Models

@inject IAuthenticationRepository _repo
@inject NavigationManager _navManager
@inject IToastService _toastService


<AuthorizeView Roles="Administrator">
    <Authorized> 
        <div>
            <h2>Konobari</h2>
            <hr />
            <br />
            <span>Dodaj novog konobara</span>
            <button class="btn-sm btn-secondary ms-2 mb-2" @onclick="@(() => NewUser())">+</button>
            <br />
            <table class="table table-hover table-bordered">
                <thead class="table-active">
                    <tr>
                        <th>Ime</th>
                        <th>Email</th>
                        <th>Telefon</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in AllUsers)
                    {
                        <tr>
                            <td>@user.FullName</td>
                            <td>@user.Email</td>
                            <td>@user.PhoneNumber</td>
                            <td class="text-center">
                                <a class="icon-btn me-3" @onclick="@(() => EditUser(user.Id))">✏️</a>
                                @if (!user.Email.ToLower().Equals(userEmail.ToLower()))
                                {
                                    <a class="icon-btn " @onclick="@(() => DeleteUser(user.Id))">🗑️</a>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

    </Authorized>
    <NotAuthorized>
        <p>Nemate pristup ovoj stranici.</p>
    </NotAuthorized>
</AuthorizeView>
@code {
    private RegistrationUserModel Model = new RegistrationUserModel();
    private bool isSuccess = true;
    private string? errorMessage;
    private string userEmail = string.Empty;
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private IList<RegistrationUserModel> AllUsers = new List<RegistrationUserModel>();

    protected override async Task OnParametersSetAsync()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            userEmail = user.Identity.Name;
            AllUsers = await _repo.GetAllUsers(user.Identity.Name);
        }
    }

    private void NewUser()
    {
        _navManager.NavigateTo("/NewUser");
    }
    private void EditUser(Guid id)
    {
        _navManager.NavigateTo($"/EditUser/{id}");
    }

    private async Task DeleteUser(Guid id)
    {
        // mozda u posebnu formu
        var error = await _repo.DeleteUser(id);
        if (error)
        {
            errorMessage = "";
            AllUsers = await _repo.GetAllUsers(userEmail);

        }
        else
        {
            errorMessage = "Greska pri brisanju";
        }
    }
}
